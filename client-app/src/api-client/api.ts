/* tslint:disable */
/* eslint-disable */
/**
 * User application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateTaskDTO
 */
export interface CreateTaskDTO {
    /**
     * 
     * @type {number}
     * @memberof CreateTaskDTO
     */
    'taskListId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskDTO
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskDTO
     */
    'startOn'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskDTO
     */
    'dueOn'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateTaskDTO
     */
    'usersIds'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateTaskDTO
     */
    'labelIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface CreateTaskListDTO
 */
export interface CreateTaskListDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateTaskListDTO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface LabelDTO
 */
export interface LabelDTO {
    /**
     * 
     * @type {number}
     * @memberof LabelDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LabelDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LabelDTO
     */
    'color'?: string;
}
/**
 * 
 * @export
 * @interface MoveTaskToAnotherTaskListDTO
 */
export interface MoveTaskToAnotherTaskListDTO {
    /**
     * 
     * @type {number}
     * @memberof MoveTaskToAnotherTaskListDTO
     */
    'taskId': number;
    /**
     * 
     * @type {number}
     * @memberof MoveTaskToAnotherTaskListDTO
     */
    'taskListId': number;
    /**
     * 
     * @type {number}
     * @memberof MoveTaskToAnotherTaskListDTO
     */
    'movedToTaskListId': number;
}
/**
 * 
 * @export
 * @interface TaskDTO
 */
export interface TaskDTO {
    /**
     * 
     * @type {number}
     * @memberof TaskDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskDTO
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    'startOn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    'dueOn'?: string | null;
    /**
     * 
     * @type {Array<UserDTO>}
     * @memberof TaskDTO
     */
    'users'?: Array<UserDTO>;
    /**
     * 
     * @type {Array<LabelDTO>}
     * @memberof TaskDTO
     */
    'labels'?: Array<LabelDTO>;
}
/**
 * 
 * @export
 * @interface TaskListDTO
 */
export interface TaskListDTO {
    /**
     * 
     * @type {number}
     * @memberof TaskListDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskListDTO
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskListDTO
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TaskListDTO
     */
    'completedTaskList'?: boolean;
    /**
     * 
     * @type {Array<TaskDTO>}
     * @memberof TaskListDTO
     */
    'tasks'?: Array<TaskDTO>;
}
/**
 * 
 * @export
 * @interface UpdateTaskDTO
 */
export interface UpdateTaskDTO {
    /**
     * 
     * @type {number}
     * @memberof UpdateTaskDTO
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateTaskDTO
     */
    'taskListId': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskDTO
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskDTO
     */
    'startOn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskDTO
     */
    'dueOn'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateTaskDTO
     */
    'usersIds'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateTaskDTO
     */
    'labelIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface UpdateTaskListDTO
 */
export interface UpdateTaskListDTO {
    /**
     * 
     * @type {number}
     * @memberof UpdateTaskListDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskListDTO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpdateTaskListsOrderDTO
 */
export interface UpdateTaskListsOrderDTO {
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateTaskListsOrderDTO
     */
    'taskListIds': Array<number>;
}
/**
 * 
 * @export
 * @interface UpdateTasksOrderInTaskListDTO
 */
export interface UpdateTasksOrderInTaskListDTO {
    /**
     * 
     * @type {number}
     * @memberof UpdateTasksOrderInTaskListDTO
     */
    'id': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateTasksOrderInTaskListDTO
     */
    'taskIds': Array<number>;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'avatarUrl'?: string;
}
/**
 * 
 * @export
 * @interface UserLoginRequest
 */
export interface UserLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UserLoginResponse
 */
export interface UserLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof UserLoginResponse
     */
    'token'?: string;
    /**
     * 
     * @type {UserDTO}
     * @memberof UserLoginResponse
     */
    'user'?: UserDTO;
}

/**
 * LabelApi - axios parameter creator
 * @export
 */
export const LabelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLabels: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/labels/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LabelApi - functional programming interface
 * @export
 */
export const LabelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LabelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLabels(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LabelDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLabels(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LabelApi - factory interface
 * @export
 */
export const LabelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LabelApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLabels(options?: any): AxiosPromise<Array<LabelDTO>> {
            return localVarFp.getAllLabels(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LabelApi - object-oriented interface
 * @export
 * @class LabelApi
 * @extends {BaseAPI}
 */
export class LabelApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelApi
     */
    public getAllLabels(options?: AxiosRequestConfig) {
        return LabelApiFp(this.configuration).getAllLabels(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskListApi - axios parameter creator
 * @export
 */
export const TaskListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeAllTasksInList: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('completeAllTasksInList', 'id', id)
            const localVarPath = `/task-list/complete-tasks-in-list/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTaskDTO} [createTaskDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask: async (createTaskDTO?: CreateTaskDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task-list/create-task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTaskDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTaskListDTO} [createTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskList: async (createTaskListDTO?: CreateTaskListDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task-list/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTaskListDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskList: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTaskList', 'id', id)
            const localVarPath = `/task-list/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTaskLists: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task-list/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedTaskList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task-list/completed-task-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MoveTaskToAnotherTaskListDTO} [moveTaskToAnotherTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveTaskToAnotherTaskList: async (moveTaskToAnotherTaskListDTO?: MoveTaskToAnotherTaskListDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task-list/move-task-to-another-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveTaskToAnotherTaskListDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTaskDTO} [updateTaskDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: async (updateTaskDTO?: UpdateTaskDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task-list/update-task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTaskDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTaskListDTO} [updateTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskList: async (updateTaskListDTO?: UpdateTaskListDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task-list/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTaskListDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTaskListsOrderDTO} [updateTaskListsOrderDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskListsOrder: async (updateTaskListsOrderDTO?: UpdateTaskListsOrderDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task-list/update-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTaskListsOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTasksOrderInTaskListDTO} [updateTasksOrderInTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTasksOrderInTaskList: async (updateTasksOrderInTaskListDTO?: UpdateTasksOrderInTaskListDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task-list/update-tasks-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTasksOrderInTaskListDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskListApi - functional programming interface
 * @export
 */
export const TaskListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeAllTasksInList(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeAllTasksInList(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateTaskDTO} [createTaskDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTask(createTaskDTO?: CreateTaskDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(createTaskDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateTaskListDTO} [createTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskList(createTaskListDTO?: CreateTaskListDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskList(createTaskListDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskList(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskList(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTaskLists(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskListDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTaskLists(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompletedTaskList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompletedTaskList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MoveTaskToAnotherTaskListDTO} [moveTaskToAnotherTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveTaskToAnotherTaskList(moveTaskToAnotherTaskListDTO?: MoveTaskToAnotherTaskListDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveTaskToAnotherTaskList(moveTaskToAnotherTaskListDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateTaskDTO} [updateTaskDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTask(updateTaskDTO?: UpdateTaskDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(updateTaskDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateTaskListDTO} [updateTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskList(updateTaskListDTO?: UpdateTaskListDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTaskList(updateTaskListDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateTaskListsOrderDTO} [updateTaskListsOrderDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskListsOrder(updateTaskListsOrderDTO?: UpdateTaskListsOrderDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTaskListsOrder(updateTaskListsOrderDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateTasksOrderInTaskListDTO} [updateTasksOrderInTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTasksOrderInTaskList(updateTasksOrderInTaskListDTO?: UpdateTasksOrderInTaskListDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTasksOrderInTaskList(updateTasksOrderInTaskListDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskListApi - factory interface
 * @export
 */
export const TaskListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskListApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeAllTasksInList(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.completeAllTasksInList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTaskDTO} [createTaskDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask(createTaskDTO?: CreateTaskDTO, options?: any): AxiosPromise<void> {
            return localVarFp.createTask(createTaskDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTaskListDTO} [createTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskList(createTaskListDTO?: CreateTaskListDTO, options?: any): AxiosPromise<void> {
            return localVarFp.createTaskList(createTaskListDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskList(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTaskList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTaskLists(options?: any): AxiosPromise<Array<TaskListDTO>> {
            return localVarFp.getAllTaskLists(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedTaskList(options?: any): AxiosPromise<TaskListDTO> {
            return localVarFp.getCompletedTaskList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MoveTaskToAnotherTaskListDTO} [moveTaskToAnotherTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveTaskToAnotherTaskList(moveTaskToAnotherTaskListDTO?: MoveTaskToAnotherTaskListDTO, options?: any): AxiosPromise<void> {
            return localVarFp.moveTaskToAnotherTaskList(moveTaskToAnotherTaskListDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateTaskDTO} [updateTaskDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(updateTaskDTO?: UpdateTaskDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateTask(updateTaskDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateTaskListDTO} [updateTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskList(updateTaskListDTO?: UpdateTaskListDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateTaskList(updateTaskListDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateTaskListsOrderDTO} [updateTaskListsOrderDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskListsOrder(updateTaskListsOrderDTO?: UpdateTaskListsOrderDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateTaskListsOrder(updateTaskListsOrderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateTasksOrderInTaskListDTO} [updateTasksOrderInTaskListDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTasksOrderInTaskList(updateTasksOrderInTaskListDTO?: UpdateTasksOrderInTaskListDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateTasksOrderInTaskList(updateTasksOrderInTaskListDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskListApi - object-oriented interface
 * @export
 * @class TaskListApi
 * @extends {BaseAPI}
 */
export class TaskListApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public completeAllTasksInList(id: number, options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).completeAllTasksInList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTaskDTO} [createTaskDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public createTask(createTaskDTO?: CreateTaskDTO, options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).createTask(createTaskDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTaskListDTO} [createTaskListDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public createTaskList(createTaskListDTO?: CreateTaskListDTO, options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).createTaskList(createTaskListDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public deleteTaskList(id: number, options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).deleteTaskList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public getAllTaskLists(options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).getAllTaskLists(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public getCompletedTaskList(options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).getCompletedTaskList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MoveTaskToAnotherTaskListDTO} [moveTaskToAnotherTaskListDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public moveTaskToAnotherTaskList(moveTaskToAnotherTaskListDTO?: MoveTaskToAnotherTaskListDTO, options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).moveTaskToAnotherTaskList(moveTaskToAnotherTaskListDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateTaskDTO} [updateTaskDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public updateTask(updateTaskDTO?: UpdateTaskDTO, options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).updateTask(updateTaskDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateTaskListDTO} [updateTaskListDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public updateTaskList(updateTaskListDTO?: UpdateTaskListDTO, options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).updateTaskList(updateTaskListDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateTaskListsOrderDTO} [updateTaskListsOrderDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public updateTaskListsOrder(updateTaskListsOrderDTO?: UpdateTaskListsOrderDTO, options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).updateTaskListsOrder(updateTaskListsOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateTasksOrderInTaskListDTO} [updateTasksOrderInTaskListDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskListApi
     */
    public updateTasksOrderInTaskList(updateTasksOrderInTaskListDTO?: UpdateTasksOrderInTaskListDTO, options?: AxiosRequestConfig) {
        return TaskListApiFp(this.configuration).updateTasksOrderInTaskList(updateTasksOrderInTaskListDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: async (userLoginRequest?: UserLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogin(userLoginRequest?: UserLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(userLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: any): AxiosPromise<Array<UserDTO>> {
            return localVarFp.getAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthUser(options?: any): AxiosPromise<UserDTO> {
            return localVarFp.getAuthUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin(userLoginRequest?: UserLoginRequest, options?: any): AxiosPromise<UserLoginResponse> {
            return localVarFp.userLogin(userLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout(options?: any): AxiosPromise<void> {
            return localVarFp.userLogout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAllUsers(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAuthUser(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getAuthUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLoginRequest} [userLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userLogin(userLoginRequest?: UserLoginRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userLogin(userLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userLogout(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userLogout(options).then((request) => request(this.axios, this.basePath));
    }
}



